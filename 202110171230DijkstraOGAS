import itertools as it
def take(n, iterable):
    "Return first n items of the iterable as a list"
    return list(it.islice(iterable, n))
def grouper(iterable, n, fillvalue='F'):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx"
    args = [iter(iterable)] * n
    return it.zip_longest(*args, fillvalue=fillvalue)
# append a 0 digit to submitted list (do this when the target proposal has been judged "good")
def extend_proposal(target):
    """append a 0 digit to submitted list, return extended list"""
    return( target.append('0') )
def proposal_good(target):
    """return TRUE if the proposed list sequence (arg target) contains no duplicates"""
    # return if target empty or if only a single digit; length_target variable is used below also
    length_target = len(target)
    if (length_target == 1):
        result_flag = True # single digit cannot be a duplicate pair, so gets a pass
        return(result_flag)
    if (length_target < 1):
        result_flag = False # empty proposal is not a good proposal
        return(result_flag)
    # check rightmost two digits first (no other duplicate pairs should exist elsewhere)
    index_next_to_last = length_target - 2
    rightmost_two_slice = target[index_next_to_last:length_target]
    if (rightmost_two_slice.count('0') > 1):
        result_flag = False # proposal NOT GOOD if pair of zeros on end
        return(result_flag)
    elif (rightmost_two_slice.count('1') > 1):
        result_flag = False # proposal NOT GOOD if pair of ones on end
        return(result_flag)
    elif (rightmost_two_slice.count('2') > 1):
        result_flag = False # proposal NOT GOOD if pair of twos on end
        return(result_flag)
    
    # if we get this far we have no repeat in final right two digits, so return good proposal if len is 2
    if length_target == 2:
        result_flag = True
        return(result_flag)
    
    # if we end up here, target proposal is longer than 2 digits and rightmost pair is not a dup
    # so must scan target chunks from right to left in expanding chunk size from 2, 3, 4 ...max size
    # all base chunks begin at rightmost digit and compare to next adjacent chunk only
    # maximum chunk size is floor( (target length)/2 )
    max_chunk_size = length_target // 2
    chunk_size = 2
    result_flag = True # assume the best and attempt to prove not true in while loop below
    # must use reversed copy because grouper fills odd length from right with F
    reversed_copy = target.copy()
    reversed_copy.reverse()
    while ( chunk_size <= max_chunk_size ):
        reversed_proposal_chunked = list( grouper( reversed_copy, chunk_size, fillvalue='F' ) )
        # and take conveniently (because reversed list now r to l) takes chunks from right to left
        # do not need to test more than first two chunks from left in reversed proposal
        if ( list(take(2, reversed_proposal_chunked)[0]) == list(take(2, reversed_proposal_chunked)[1]) ):
            result_flag = False # function tests if GOOD proposal, if has dup pattern is BAD!
            break
        # current chunks tested NOT EQUAL above, so expand chunk size and test again
        chunk_size += 1
        
    # if arrived here, then either "breaked" out of loop with a dup pattern, or fell through no dups
    return(result_flag)
def increase_proposal(target):
    """bump rightmost digit unless already a 2; otherwise delete the 2 first then bump next to last"""
    length_of_target = len(target)
    index_of_first_item_on_right = length_of_target - 1
    # program flow assures no 0 length targets submitted, otherwise test for that possibility here
    # if come in with rightmost digits equal to "2", delete them then below increment
    while True:
        if (target[index_of_first_item_on_right] == '2'):
            del target[index_of_first_item_on_right]
            length_of_target = len(target)
            index_of_first_item_on_right = length_of_target - 1
        else:
            break
       
    # be safe and do not assume anything about the numeric nature of the digit characters in the list
    if (target[index_of_first_item_on_right] == '0'):
        target[index_of_first_item_on_right] = '1'
    elif (target[index_of_first_item_on_right] == '1'):
        target[index_of_first_item_on_right] = '2'
    return
# the calling program demands that increase_proposal modifies the argument target in place, i.e.
# that no updated list return is required, that the calling program's target is thereby modified
# it having been previously declared globally outside any particular scope
proposal_10161207 = list('')
number_of_digits_in_sequence = len(proposal_10161207)
# it should be anticipated that number_of_digits_in_sequence may increase and decrease within code below
# say max sequence length desired (comment out print within while loop if more than 8 or so to prevent flood)
# and uncomment the final two prints to see the final sequence of the run and the length of the collection
max_seq_len_desired = 8
# proposal_10161207 is a global and is assumed to be modified in place below by called subroutines (functions)
while number_of_digits_in_sequence < max_seq_len_desired:
    # append a "0" digit to last proposal validated (or first empty list if now beginning)
    extend_proposal(proposal_10161207)
    # if the current proposed sequence contains a duplicate pair or pattern r to l, then bump r digit
    # (the increase_proposal function can also delete a terminating "2" and bump the remaining digit)
    
    while ( not proposal_good(proposal_10161207) ):
        increase_proposal(proposal_10161207)

    # if arrive here, then have a good sequence, so print it (or store to print later)
    # uncomment the following print if doing a reasonably small number of digits, e.g., 20
    print("{0}".format(proposal_10161207))
    # update the length of the currently validated sequence
    number_of_digits_in_sequence = len(proposal_10161207)

# if asking for more than 20 digits or so, comment out the print line within the while loop above
# and just print the final length sequence after the while loop below, with the length
"""
print("{0}".format(proposal_10161207))
print("{0}".format( len(proposal_10161207)  ))
""";


